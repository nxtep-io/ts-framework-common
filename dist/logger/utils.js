"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fast_safe_stringify_1 = require("fast-safe-stringify");
const triple_beam_1 = require("triple-beam");
const winston_1 = require("winston");
const nano_errors_1 = require("nano-errors");
exports.lineFormat = winston_1.format((info) => {
    const stringifiedRest = fast_safe_stringify_1.default(Object.assign({}, info, { level: undefined, message: undefined, splat: undefined }), null, 2);
    const padding = info.padding && info.padding[info.level] || '';
    if (stringifiedRest !== '{}') {
        info[triple_beam_1.MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;
    }
    else {
        info[triple_beam_1.MESSAGE] = `${info.level}:${padding} ${info.message}`;
    }
    return info;
});
// Quick and dirty fix for Winston@3.0.0 issue with errors
// @see {https://github.com/winstonjs/winston/issues/1338}
exports.enumerateErrorFormat = winston_1.format((info) => {
    if (info.message instanceof nano_errors_1.BaseError) {
        return Object.assign({ message: info.message.message, stack: info.message.stack }, info.message);
    }
    if (info.message instanceof Error) {
        return Object.assign({ message: info.message.message, stack: info.message.stack }, info.message);
    }
    if (info instanceof nano_errors_1.BaseError) {
        return Object.assign({ message: info.message, stack: info.stack }, info);
    }
    if (info instanceof Error) {
        return Object.assign({ message: info.message, stack: info.stack }, info);
    }
    return info;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbG9nZ2VyL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBQWdEO0FBQ2hELDZDQUFzQztBQUN0QyxxQ0FBaUM7QUFDakMsNkNBQXdDO0FBRTNCLFFBQUEsVUFBVSxHQUFHLGdCQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtJQUM3QyxNQUFNLGVBQWUsR0FBRyw2QkFBYSxtQkFDaEMsSUFBSSxJQUNQLEtBQUssRUFBRSxTQUFTLEVBQ2hCLE9BQU8sRUFBRSxTQUFTLEVBQ2xCLEtBQUssRUFBRSxTQUFTLEtBQ2YsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRVosTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0QsSUFBSSxlQUFlLEtBQUssSUFBSSxFQUFFO1FBQzVCLElBQUksQ0FBQyxxQkFBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLGVBQWUsRUFBRSxDQUFDO0tBQy9FO1NBQU07UUFDTCxJQUFJLENBQUMscUJBQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzVEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMsQ0FBQztBQUVILDBEQUEwRDtBQUMxRCwwREFBMEQ7QUFDN0MsUUFBQSxvQkFBb0IsR0FBRyxnQkFBTSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7SUFDdkQsSUFBSSxJQUFJLENBQUMsT0FBTyxZQUFZLHVCQUFTLEVBQUU7UUFDckMsdUJBQ0UsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUM3QixLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQ3RCLElBQUksQ0FBQyxPQUFPLEVBQ2Y7S0FDSDtJQUVELElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxLQUFLLEVBQUU7UUFDakMsdUJBQ0UsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUM3QixLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQ3RCLElBQUksQ0FBQyxPQUFPLEVBQ2Y7S0FDSDtJQUVELElBQUksSUFBSSxZQUFZLHVCQUFTLEVBQUU7UUFDN0IsdUJBQ0UsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxJQUNkLElBQUksRUFDUDtLQUNIO0lBRUQsSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO1FBQ3pCLHVCQUNFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUNyQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFDZCxJQUFJLEVBQ1A7S0FDSDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQganNvblN0cmluZ2lmeSBmcm9tICdmYXN0LXNhZmUtc3RyaW5naWZ5JztcbmltcG9ydCB7IE1FU1NBR0UgfSBmcm9tICd0cmlwbGUtYmVhbSc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICd3aW5zdG9uJztcbmltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJ25hbm8tZXJyb3JzJztcblxuZXhwb3J0IGNvbnN0IGxpbmVGb3JtYXQgPSBmb3JtYXQoKGluZm86IGFueSkgPT4ge1xuICBjb25zdCBzdHJpbmdpZmllZFJlc3QgPSBqc29uU3RyaW5naWZ5KHtcbiAgICAuLi5pbmZvLFxuICAgIGxldmVsOiB1bmRlZmluZWQsXG4gICAgbWVzc2FnZTogdW5kZWZpbmVkLFxuICAgIHNwbGF0OiB1bmRlZmluZWRcbiAgfSwgbnVsbCwgMik7XG5cbiAgY29uc3QgcGFkZGluZyA9IGluZm8ucGFkZGluZyAmJiBpbmZvLnBhZGRpbmdbaW5mby5sZXZlbF0gfHwgJyc7XG4gIGlmIChzdHJpbmdpZmllZFJlc3QgIT09ICd7fScpIHtcbiAgICBpbmZvW01FU1NBR0VdID0gYCR7aW5mby5sZXZlbH06JHtwYWRkaW5nfSAke2luZm8ubWVzc2FnZX0gJHtzdHJpbmdpZmllZFJlc3R9YDtcbiAgfSBlbHNlIHtcbiAgICBpbmZvW01FU1NBR0VdID0gYCR7aW5mby5sZXZlbH06JHtwYWRkaW5nfSAke2luZm8ubWVzc2FnZX1gO1xuICB9XG5cbiAgcmV0dXJuIGluZm87XG59KTtcblxuLy8gUXVpY2sgYW5kIGRpcnR5IGZpeCBmb3IgV2luc3RvbkAzLjAuMCBpc3N1ZSB3aXRoIGVycm9yc1xuLy8gQHNlZSB7aHR0cHM6Ly9naXRodWIuY29tL3dpbnN0b25qcy93aW5zdG9uL2lzc3Vlcy8xMzM4fVxuZXhwb3J0IGNvbnN0IGVudW1lcmF0ZUVycm9yRm9ybWF0ID0gZm9ybWF0KChpbmZvOiBhbnkpID0+IHtcbiAgaWYgKGluZm8ubWVzc2FnZSBpbnN0YW5jZW9mIEJhc2VFcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBpbmZvLm1lc3NhZ2UubWVzc2FnZSxcbiAgICAgIHN0YWNrOiBpbmZvLm1lc3NhZ2Uuc3RhY2ssXG4gICAgICAuLi5pbmZvLm1lc3NhZ2VcbiAgICB9O1xuICB9XG5cbiAgaWYgKGluZm8ubWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IGluZm8ubWVzc2FnZS5tZXNzYWdlLFxuICAgICAgc3RhY2s6IGluZm8ubWVzc2FnZS5zdGFjayxcbiAgICAgIC4uLmluZm8ubWVzc2FnZVxuICAgIH07XG4gIH1cblxuICBpZiAoaW5mbyBpbnN0YW5jZW9mIEJhc2VFcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBpbmZvLm1lc3NhZ2UsXG4gICAgICBzdGFjazogaW5mby5zdGFjayxcbiAgICAgIC4uLmluZm8sXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpbmZvIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogaW5mby5tZXNzYWdlLFxuICAgICAgc3RhY2s6IGluZm8uc3RhY2ssXG4gICAgICAuLi5pbmZvLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW5mbztcbn0pO1xuIl19